import time, os
import tkinter as tk
from tkinter import ttk
import simpleaudio
import copy
import numpy as np
import scipy.fftpack
import sounddevice as sd

basedir = os.path.dirname(__file__)
strong_beat = simpleaudio.WaveObject.from_wave_file(os.path.join(basedir,'strong_beat.wav'))
weak_beat = simpleaudio.WaveObject.from_wave_file(os.path.join(basedir,'weak_beat.wav'))
sub_strong_beat = simpleaudio.WaveObject.from_wave_file(os.path.join(basedir,'sub_strong_beat.wav'))

theme_colors = {'bg': '#52767D', 'text':'#FFFFE6', 'label_bg':'#63878E', 'scale_through':'#52767D'}
theme_fonts = ['Courier']
tempo_range = [30, 230]
defaults = {'tempo': 120, 'scale_length': 550}


window = tk.Tk()

notebook = ttk.Notebook(window, width = '950', height = '650')

#home tab
Home = ttk.Frame(notebook)

#tuner tab
Tuner = ttk.Frame(notebook)


#metronome tab
metronome = ttk.Frame(notebook)

leftFrame = ttk.Frame(metronome)
leftFrame.pack(side='bottom',fill='both')

midFrame = ttk.Frame(metronome)
midFrame.pack(side='left', fill='both')

rightFrame = ttk.Frame(metronome)
rightFrame.pack(side='left', fill='both', expand=1)

time_signatures = {0: [' 2 / 4', (2, 4)], 1: [' 3 / 4',(3 ,4)], 2: [' 4 / 4',(4, 4)], 3: [' 2 / 2',(2, 2)],
                   4: [' 6 / 8',(6, 8)], 5: [' 9 / 8',(9, 8)], 6: ['12 / 8',(12, 8)]}

ts_mode = tk.IntVar(leftFrame)
for mode in time_signatures.keys():
    radio_button = tk.Radiobutton(leftFrame, text = time_signatures[mode][0], variable = ts_mode,
                    value = mode, fg=theme_colors['text'],
                    bg=theme_colors['bg'], anchor='w', font=(theme_fonts[0], 10))
    if time_signatures[mode][-1] == (4, 4): # Select 4/4 by default
        radio_button.select()
    radio_button.pack(side = 'left')

# In middle frame

btn = ttk.Button(midFrame, text = 'Pause/Play', command = lambda: paused_funk())
btn.pack(side = 'bottom')
butn = ttk.Button(midFrame, text = 'Tap', command = lambda: tap())
butn.pack()
tempo_label =tk.Label(midFrame, text='120', font=(theme_fonts[0], 120, 'bold'),
                      justify='center', fg = theme_colors['text'], bg = theme_colors['label_bg'])
tempo_label.pack(fill='both', expand=1)

# Variable for the scale value
scale_var = tk.IntVar(midFrame)

# When scale changes
def update(*args):
    global scale_var, time_signature, interval_ms, tempo, tempo_label, marking_label
    tempo = scale_var.get()
    interval_ms = int((60/tempo) * (4/time_signature[-1]) * 1000)
    tempo_label['text'] = '{}'.format(tempo)
    marking_label['text'] = '{}'.format(marking)

# Use a scale to show the tempo range
scale = tk.Scale(midFrame,
             from_=tempo_range[0],
             to= tempo_range[1],
             orient=tk.HORIZONTAL,
             length=defaults['scale_length'],
             showvalue=0,
             troughcolor = theme_colors['scale_through'],
             bd = 0,
             activebackground = theme_colors['text'],
             bg = theme_colors['label_bg'],
             sliderlength = 30,
             width = 25,
             font=(theme_fonts[0]),
             variable=scale_var,
             command=update)
scale.set(defaults['tempo'])
scale.pack(side='bottom',fill='both', expand='0')

# In right frame
# Label to show click number in a measure
count_label =tk.Label(rightFrame, text='0', fg=theme_colors['text'], bg =theme_colors['bg'], width=3, font=(theme_fonts[0], 180, 'bold'), justify='left')
count_label.pack(fill='both', expand=1)


# When time signature mode changes
def update_time_signature(*args):
    global temp, time_signature, count, interval_ms
    time_signature = time_signatures[ts_mode.get()][-1]
    interval_ms = int((60/tempo) * (4/time_signature[-1]) * 1000)
    count = 0
ts_mode.trace('w', update_time_signature)

# Time signature selection implementation
time_signature = time_signatures[ts_mode.get()][-1]
tempo = 120
interval_ms = int((60/tempo) * (4/time_signature[-1]) * 1000)
count = 0
ON = False
def play():
    global count, time_signature, count_label, ON
    if ON:
        count += 1
        count_label['text'] = '{}'.format(count)
        if time_signature[0] == -1:
            strong_beat.play()
        else:
            if count == 1:
                strong_beat.play()
            else:
                if time_signature[-1] == 8 and count % 3 == 1:
                    sub_strong_beat.play()
                else:
                    weak_beat.play()
        if count == time_signature[0]:
            count = 0
    window.after(interval_ms, play)

time_list = []
def tap_estimate():
    global time_list, scale
    time_list.append(time.time())
    list_len = len(time_list)
    N = 6
    if list_len > 1:
        # If two time far away from each other
        # throw away the former times, only left the last one
        if time_list[-1] - time_list[-2] > 2:
            time_list = time_list[-1:]
        else:
            if list_len < N:
                interval = (time_list[-1] - time_list[0]) / (list_len - 1)
            else:
                interval = (time_list[-1] - time_list[-N]) / (N - 1)
            tempo = int(60/interval)
            scale.set(tempo)
    else:
        # Keep tapping
        pass
    # print(time_list)

def tap():
    tap_estimate()

def paused_funk():
    global ON
    ON = not ON
def key_pressed(event):
    global ts_mode, time_signatures
    if event.char =='m':
        ts_mode.set((ts_mode.get() + 1)%len(time_signatures))
    elif event.char == 'q':
        exit()



window.bind("<Key>",key_pressed)

window.after(interval_ms, play)


notebook.add(Home, text = 'Home')
notebook.add(metronome, text = 'metronome')
notebook.add(Tuner, text = 'Tuner')
notebook.pack()


window.mainloop()
